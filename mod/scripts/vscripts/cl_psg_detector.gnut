global function Cl_PSG_Detector_Init
global function GetPSG_State

struct
{
	table< entity, float > EstimatedPSEndTime
	table< entity, float > PSTime

	table< entity, bool> PSGlitching
	table< entity, bool> PhaseShifting
} file

void function Cl_PSG_Detector_Init()
{
	AddCallback_OnPlayerConnected( PlayerJoinTheGame )
	AddCallback_GameStateEnter( eGameState.Playing, PlayerClientScriptInit )
}

void function PlayerClientScriptInit()
{
	foreach( entity player in GetPlayerArray() )
	{
		if( !( player in file.EstimatedPSEndTime ) )
			thread PSG_Monitor( player )
	}
}

void function PlayerJoinTheGame( entity player, int state )
{
	if( !( player in file.EstimatedPSEndTime ) )
		thread PSG_Monitor( player )
}

void function PSG_Monitor( entity player )
{
	file.EstimatedPSEndTime[ player ] <- 99999999.0
	file.PSGlitching[ player ] <- false
	file.PSTime[player] <- 0.0
	printt("Start monitoring" + player.GetPlayerName())
	// player.EndSignal( "OnDestroy" )

	while(true)
	{
		WaitFrame()
		if ( IsValid( player ) && player.IsPlayer() )
		{
			if ( IsAlive( player ) )
			{
				if( player.IsPhaseShifted() )
				{
					float curTime = Time()
					// float t = curTime - file.PSTime[player]
					// if (t < GetEstimatedPhaseShiftDuration(player))
					// {
					// 	printt(player.GetPlayerName()+" BUG!!!!!! by pandora")
					// }

					// file.PSTime[player] <- curTime
					float PSTimeRemaining = player.PhaseShiftTimeRemaining()
					file.EstimatedPSEndTime[ player ] <- curTime + PSTimeRemaining
					wait PSTimeRemaining

					if (player.IsPhaseShifted())
					{
						if( Time() > file.EstimatedPSEndTime[ player ] )
						{
							file.PSGlitching[ player ] <- true
							printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
						}
					}
					file.EstimatedPSEndTime[ player ] <- 99999999.0
				}
			}
			else if ( file.PSGlitching[ player ] )
			{
				file.PSGlitching[ player ] <- false
			}
		}
		else
		{
			printt("Warning: player invalid")
		}
	}
}

float function GetEstimatedPhaseShiftDuration( entity player ) {
	if ( player.IsTitan() )
	{
		return 1.0
	}
	else
	{
		return 2.0
	}
	unreachable
}

bool function GetPSG_State( entity player ) {
	if (player.IsPlayer())
	{
		if (player in file.PSGlitching)
		{
			return file.PSGlitching[ player ]
		}
		else
		{
			file.PSGlitching[ player ] <- false
			printt("Waring: player %s not found in GetPSG_State", player.GetPlayerName())
		}
	}
	else
	{
		printt("Waring: entity is not player! GetPSG_State")
	}
	return false
}