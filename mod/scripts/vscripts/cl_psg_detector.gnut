global function Cl_PSG_Detector_Init
global function GetPSG_State

struct
{
	table< string, float > NextPSTime
	table< string, float > LastPSEnd
	table< string, float > LastPSStart
	table< string, bool > PSGlitching
	table< string, bool > PhaseShifting
	table< string, bool > Initialized
} file

// table<string, bool> printed

void function Cl_PSG_Detector_Init()
{
	RegisterSignal( "LocalPlayerDisconnected" )
	AddCallback_OnPlayerConnected( PlayerJoinTheGame )
	AddCallback_GameStateEnter( eGameState.Playing, PlayerClientScriptInit )
	AddCallback_OnPlayerDisconnected( PlayerDisconnected )
}

void function PlayerClientScriptInit()
{
	ClearStatus()
	foreach( entity player in GetPlayerArray() )
	{
		InitPlayerStatus( player )
	}
	thread PSG_Monitor( GetLocalViewPlayer() )
}

void function PlayerJoinTheGame( entity player, int state )
{
	InitPlayerStatus( player )
}

void function PlayerDisconnected( entity player )
{
	if ( player == GetLocalViewPlayer() )
	{
		player.Signal( "LocalPlayerDisconnected" )
		printt("\n#################\n" + "LocalPlayerDisconnected" + "\n#################\n") // TODO check log
	}
}

void function PSG_Monitor( entity player )
{

	// player.EndSignal( "OnDestroy" )
	player.EndSignal( "LocalPlayerDisconnected" )

	OnThreadEnd(
		function() : ()
		{
			ClearStatus()
		}
	)

	while(true)
	{
		foreach ( entity currentPlayer in GetPlayerArray() ) {
			CheckPlayer( currentPlayer )
		}
		WaitFrame()
	}
}

void function CheckPlayer( entity player )
{
	if ( IsValid( player ) && player.IsPlayer() )
	{
		string pname = player.GetPlayerName()
		if ( !( pname in file.Initialized ) )
		{
			// printt("#################")
			// printt(format("Warning: %s not initialized!", pname)) // TODO check log
			// printt("#################")
			InitPlayerStatus( player )
		}
		if ( IsAlive( player ) )
		{
			if( player.IsPhaseShifted() )
			{
				if (file.PhaseShifting[ pname ])
					return

				printt(pname + " starts phase shift--------------------------------------------")
				float curTime = Time()
				if ( curTime < file.NextPSTime[ pname ])
				{
					file.PSGlitching[ pname ] <- true
					printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\nNextPSTime")
					printt(format("%.6f %.6f", curTime, file.NextPSTime[ pname ]) )
					printt(format("delta time %.6f < 0", curTime - file.NextPSTime[ pname ]))
				}
				else
				{
					printt(format("curTime - file.NextPSTime %.6f", curTime - file.NextPSTime[ pname ]))
				}
				if (fabs(curTime - file.LastPSEnd[ pname ]) < 0.2)
				{
					file.PSGlitching[ pname ] <- true
					printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n Gap between PS")
					printt(format("%.6f %.6f", curTime, file.LastPSEnd[ pname ]) )
					printt(format("delta time %.6f < 0.2", curTime - file.LastPSEnd[ pname ]))
				}
				else
				{
					printt(format("curTime - file.LastPSEnd %.6f", curTime - file.LastPSEnd[ pname ]))
				}

				file.PhaseShifting[ pname ] <- true
				float PSRemainingTime = player.PhaseShiftTimeRemaining()
				file.NextPSTime[ pname ] <- curTime + GetEstimatePSThreshold(player, PSRemainingTime)
				file.LastPSStart[ pname ] <- curTime
				printt(format("%.6f %.6f %.6f", curTime, PSRemainingTime, curTime + PSRemainingTime ))
			}
			else if ( file.PhaseShifting[ pname ] )
			{
				float curTime = Time()
				file.PhaseShifting[ pname ] <- false
				file.LastPSEnd[ pname ] <- curTime
				printt(pname + " exits phase shift--------------------------------------------")
				printt(format("%.6f %.6f", curTime, file.NextPSTime[ pname ]) )
				printt(format("time in ps %.6f", curTime - file.LastPSStart[ pname ]))
				// TODO: record estimated ps duration
				if (player.IsTitan())
				{
					if (curTime - file.LastPSStart[ pname ] > 1.5 )
					{
						file.PSGlitching[ pname ] <- true
						printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n Suspicious PS duration")
						printt(format("%.6f %.6f", curTime, file.LastPSStart[ pname ]) )
						printt(format("delta time %.6f > 1.5", curTime - file.LastPSStart[ pname ]))
					}
				}
				else
				{
					if (curTime - file.LastPSStart[ pname ] > 2.5 )
					{
						file.PSGlitching[ pname ] <- true
						printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n Suspicious PS duration")
						printt(format("%.6f %.6f", curTime, file.LastPSStart[ pname ]) )
						printt(format("delta time %.6f > 2.5", curTime - file.LastPSStart[ pname ]))
					}
				}
			}
		}
		else if ( file.PSGlitching[ pname ] || file.PhaseShifting[ pname ])
		{
			file.PSGlitching[ pname ] <- false
			file.PhaseShifting[ pname ] <- false
		}
	}
	else
	{
		// printt("Warning: player invalid")
	}
}

void function InitPlayerStatus( entity player )
{
	string pname = player.GetPlayerName()
	file.NextPSTime[ pname ] <- 0.0
	file.PSGlitching[ pname ] <- false
	file.PhaseShifting[ pname ] <- false
	file.Initialized[ pname ]<- true
	file.LastPSEnd[ pname ] <- -100.0
	file.LastPSStart[ pname ] <- 99999.0
	printt("Start monitoring " + player.GetPlayerName() + "#####################################################")
}

float function GetEstimatePSThreshold( entity player, float remaining) {
	if ( player.IsTitan() )
	{
		if (remaining > 2.1)
			return 3.15 // autoshift
		return 1.15
	}
	else
	{
		return 2.5
	}
	unreachable
}

bool function GetPSG_State( entity player ) {
	if (player.IsPlayer())
	{
		string pname = player.GetPlayerName()
		if ( pname in file.PSGlitching )
		{
			return file.PSGlitching[ pname ]
		}
		else
		{
			file.PSGlitching[ pname ] <- false
			printt(format("Waring: player %s not found in GetPSG_State", pname))
		}
	}
	else
	{
		printt("Waring: entity is not player! GetPSG_State")
	}
	return false
}

void function ClearStatus()
{
	file.NextPSTime.clear()
	file.LastPSEnd.clear()
	file.LastPSStart.clear()
	file.PSGlitching.clear()
	file.PhaseShifting.clear()
	file.Initialized.clear()
	printt("#################")
	printt("Clearing status") // TODO check log
	printt("#################")
}